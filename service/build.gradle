apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'application'
apply plugin: 'docker'
apply plugin: 'maven-publish'

description = "email-service"

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

version = '0.0.1-SNAPSHOT'
archivesBaseName = "email-service"

def javaVersion = JavaVersion.VERSION_1_8

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

repositories {
    mavenCentral()
}

bootJar {
    baseName = 'email-service'
    enabled = true
}

jar {
    archiveBaseName = 'email-service'
}


dependencies {
    compile project(":model")
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    compile 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:3.0.0'

    compile 'org.springframework.cloud:spring-cloud-openfeign-core:3.0.0'
    compile 'io.github.openfeign:feign-okhttp:11.0'
    compile 'io.github.openfeign:feign-gson:11.0'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    runtime 'org.postgresql:postgresql:42.2.5'

    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.9.9'
    implementation 'com.fasterxml.jackson.module:jackson-module-parameter-names'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    implementation 'javax.validation:validation-api'
    implementation 'org.liquibase:liquibase-core'

    implementation 'org.hibernate:hibernate-validator:6.0.10.Final'
    implementation 'org.glassfish:javax.el:3.0.1-b10'

}

publishing {
    publications {
        bootJava(MavenPublication) {
            artifact bootJar
        }
    }
}
project.tasks.publish.dependsOn bootJar

task buildDocker(type: Docker, dependsOn: build) {
    applicationName = project.archivesBaseName
    dockerfile = file('Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}